
#These rules are heavily influence by the Otto rule definition. But they are not
#guaranteed to obey it strictly.


#Rules map between DialogActs and strings for the tell-phone-number dialogue.
#
#A DialogAct is   Intent(LogicalForm, ...)

#Word categories are like in Otto, in terms of variables enclosed by brackets [$1]
#Word categories are not rules that produce DialogActs in parsing input sentences.
#They are notational shortcuts for expressing rules. 
#They are however used in parsing to allow combinatoric sequences of words to be interpreted.


#Intents:
#
#Inform
#Proffer information about topic or dialog management.
#Assumption that the recipient's belief confidence is low.
#
#Request
#Request information about topic or dialog management,
#or request adjustment in dialog management protocol.
#Assumption that the speaker's belief confidence is low.
#
#Check
#Reiterate or request affirmation of topic information or dialog 
#management protocol state.
#Assumption that the speaker's belief confidence is high.
#
#Confirm
#Profide confirmation or affirmation of topic information or dialog management.
#Assumption that the speaker's belief confidence is high.
#Used if sender believes the recipient's information is correct.
#
#Correction
#Disaffirm topic information as communicated or dialog management protocol state.
#Assumption that that the recipient's belief confidence is high.
#Used if sender believes the recipient's information is incorrect.
#


#DialogAct Intents
#
#InformTopicInfo
#InformDialogManagement
#RequestTopicInfo
#RequestDialogManagement
#CheckTopicInfo
#CheckDialogManagement
#ConfirmTopicInfo
#ConfirmDialogManagement


#LogicalForm predicates
#
#ItemValue( value-LogicalForm )
#ItemType
#Digit
#DigitSequence
#IndexicalPosition
#IndexicalRelation



#Digit word categories
DigitCat[one] <-> one
DigitCat[two] <-> two
DigitCat[three] <-> three
DigitCat[four] <-> four
DigitCat[five] <-> five
DigitCat[six] <-> six
DigitCat[seven] <-> seven
DigitCat[eight] <-> eight
DigitCat[nine] <-> nine
DigitCat[zero] <-> zero
DigitCat[zero] <-> oh

#Sending of digit values as InformTopicData DialogActs
InformTopicInfo(ItemValue(Digit($1))) <-> {DigitCat[$1]}

InformTopicInfo(ItemValue(DigitSequence($1, $2))) <-> \
{DigitCat[$1]} {DigitCat[$2]} 
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}


#Sending of digit values as CheckTopicInfo DialogActs
#Right now, ruleProcessing.selectMaximallyCoveringRules() does not allow muliple DialogActs to 
#apply to the same set of words, so it does not return two interpretations of the same input
#.e.g. both InformTopicInfo and CheckTopicInfo.
#CheckTopicInfo(ItemValue(Digit($1))) <-> {DigitCat[$1]}
#
#CheckTopicInfo(ItemValue(DigitSequence($1, $2))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} 
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} #{DigitCat[$10]}










#One possible approach
#InformTopicInfo(ItemType(telephone-number)) <-> {ObjectCat[telephone]} number
#ObjectCat[telephone] <-> telephone
#ObjectCat[telephone] <-> phone

#InformTopicInfo(ItemType(digit)) <-> digit
#InformTopicInfo(ItemType(digit)) <-> number
#InformTopicInfo(ItemType(area-code)) <-> area code
#InformTopicInfo(ItemType(exchange)) <-> exchange
#InformTopicInfo(ItemType(exchange)) <-> prefix
#InformTopicInfo(ItemType(line-number)) <-> line number
#InformTopicInfo(ItemType(line-number)) <-> last four digits
#InformTopicInfo(ItemType(line-number)) <-> last four numbers



#A second approach 

InformTopicInfo(ItemType($1)) <-> {InfoTypeCat[$1]}

InfoTypeCat[telephone-number] <-> phone number
InfoTypeCat[telephone-number] <-> telephone number
InfoTypeCat[digit] <-> number
InfoTypeCat[digit] <-> digit
InfoTypeCat[area-code] <-> area code
InfoTypeCat[exchange] <-> prefix
InfoTypeCat[exchange] <-> exchange
InfoTypeCat[line-number] <-> line number
InfoTypeCat[line-number] <-> last four digits
InfoTypeCat[line-number] <-> last four numbers



InfoTypeCat[address] <-> place of residence
InfoTypeCat[address] <-> street address
InfoTypeCat[address] <-> address

InfoTypeCat[agent-name] <-> your name
InfoTypeCat[user-name] <-> my name

InfoNameCat[person] <-> person
InfoNameCat[computer] <-> computer


InformTopicInfo(self-name, Name($1)) <-> My name is {InfoNameCat[$1]}
InformTopicInfo(self-name, Name($1)) <-> My name it is {InfoNameCat[$1]}
InformTopicInfo(self-name, Name($1)) <-> {InfoNameCat[$1]} is my name
InformTopicInfo(self-name, Name($1)) <-> my name it's {InfoNameCat[$1]}
InformTopicInfo(self-name, Name($1)) <-> my name it is {InfoNameCat[$1]}
InformTopicInfo(partner-name, Name($1)) <-> I believe your name is {InfoNameCat[$1]}



InformTopicInfo(SayItemType($1)) <-> the {InfoTypeCat[$1]} is 
InformTopicInfo(SayItemType(line-number)) <-> the line number is





#Indexical word categories
IndexicalCat[first] <-> first
IndexicalCat[second] <-> second
IndexicalCat[third] <-> third
IndexicalCat[fourth] <-> fourth
IndexicalCat[fifth] <-> fifth
IndexicalCat[sixth] <-> sixth
IndexicalCat[seventh] <-> seventh
IndexicalCat[last] <-> last
IndexicalCat[last] <-> final
IndexicalCat[last] <-> the final

InformTopicInfo(IndexicalPosition($1)) <-> {IndexicalCat[$1]} number
InformTopicInfo(IndexicalPosition($1)) <-> {IndexicalCat[$1]} digit

InformTopicInfo(IndexicalRelation(first)) <-> first
InformTopicInfo(IndexicalRelation(second)) <-> second
InformTopicInfo(IndexicalRelation(third)) <-> third
InformTopicInfo(IndexicalRelation(last)) <-> last
InformTopicInfo(IndexicalRelation(last)) <-> final
InformTopicInfo(IndexicalRelation(previous)) <-> before
InformTopicInfo(IndexicalRelation(previous)) <-> last number
InformTopicInfo(IndexicalRelation(previous)) <-> previous number
InformTopicInfo(IndexicalRelation(next)) <-> after
InformTopicInfo(IndexicalRelation(next)) <-> next
InformTopicInfo(IndexicalRelation(next)) <-> then


#as in, "That's the third time I've given you the area code"
InformDialogManagement(Alignment()) <-> last time
InformDialogManagement(Alignment()) <-> next time
InformDialogManagement(Alignment()) <-> second time
InformDialogManagement(Alignment()) <-> third time
InformDialogManagement(Alignment()) <-> fourth time



CommandCat[tell-me] <-> tell me
CommandCat[tell-me] <-> give me
CommandCat[tell-me] <-> provide me
CommandCat[tell-me] <-> what is

CommandCat[tell-you] <-> tell you
CommandCat[tell-you] <-> give you
CommandCat[tell-you] <-> provide you
CommandCat[tell-you] <-> take this
CommandCat[tell-you] <-> take down this


#command form: tell me / tell you the the...
RequestTopicInfo(SendReceive($1), InfoTopic($2)) <-> {CommandCat[$1]} {InfoTypeCat[$2]}

#Pure request form; what is/was the/that digit/area-code/exchange/number/ telephone number
RequestTopicInfo(ItemType($1)) <-> what {GrammaticalBeCat[$2]}{GrammaticalIndicativeCat[$3]}{InfoTypeCat[$1]}
RequestTopicInfo(ItemType($1)) <-> {GrammaticalIndicativeCat[$3]}{InfoTypeCat[$1]}{GrammaticalBeCat[$2]} what


RequestTopicInfo(SendReceive(tell-me), InfoTopic(user-name)) <-> who am i
RequestTopicInfo(SendReceive(tell-me), InfoTopic(agent-name)) <-> who are you

InfoTypeCat[agent-name] <-> your name
InfoTypeCat[user-name] <-> my name

#If an InfoTypeCat is not recognized, at least notice that a RequestTopicInfo has been issued
RequestTopicInfo(tell-me) <-> {CommandCat[tell-me]}




#Request confirmation of digit values as RequestTopicData DialogActs
#These mirror InformTopicInfo above
#Unfortunate that we have to spell out each digit argument in a digit sequence. 
#There should be a more concise way to do this.
#was that six / is that six

RequestTopicInfo(request-confirmation, ItemValue(Digit($1))) <-> \
{GrammaticalBeIndicativeCat[$100]} {DigitCat[$1]}\


RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} 

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
{GrammaticalBeIndicativeCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}









InformDialogManagement(greeting) <-> hello

InformTopicInfo(all-done) <-> We're all done

#capitalization and punctuation means this can be processed as output only.
InformDialogManagement(misaligned-roles) <-> Hello?

InformDialogManagement(dialog-invitation) <-> Would you like to send or receive a phone number?

InformDialogManagement(misaligned-index-pointer) <-> we are out of sync about which digit we're talking about

InformDialogManagement(misaligned-digit-values) <-> we are out of sync about the phone number digits


#Also serves as CheckTopicInfo(request-affirmation), as in okay? as a question
#When we have prosody then maybe we can separate these.
#These are turn continuers.
ConfirmDialogManagement(affirmation-okay) <-> ok
ConfirmDialogManagement(affirmation-okay) <-> okay
ConfirmDialogManagement(affirmation-yes) <-> yes
ConfirmDialogManagement(affirmation-yes) <-> yup
ConfirmDialogManagement(affirmation-yes) <-> proceed
ConfirmDialogManagement(affirmation-yes) <-> go on
ConfirmDialogManagement(affirmation-yes) <-> got it
ConfirmDialogManagement(affirmation-yes) <-> got it already
ConfirmDialogManagement(affirmation-yes) <-> got that
ConfirmDialogManagement(affirmation-yes) <-> allright
ConfirmDialogManagement(affirmation-yes) <-> all right
ConfirmDialogManagement(affirmation-yes) <-> i got it already
ConfirmDialogManagement(affirmation-yes) <-> i got that already


#These should probably be broken out as request-for-next-chunk, which 
#would imply affirmation-yes but goes beyond that.
ConfirmDialogManagement(affirmation-yes) <-> keep going
ConfirmDialogManagement(affirmation-yes) <-> what else
ConfirmDialogManagement(affirmation-yes) <-> then what
ConfirmDialogManagement(affirmation-yes) <-> what's next
ConfirmDialogManagement(affirmation-yes) <-> what is next
ConfirmDialogManagement(affirmation-yes) <-> what comes next
ConfirmDialogManagement(affirmation-yes) <-> what's after that
ConfirmDialogManagement(affirmation-yes) <-> what is after that
ConfirmDialogManagement(affirmation-yes) <-> what comes after that


InformDialogManagement(self-correction) <-> sorry



#not sure about just plain no, it is so context-dependent
CorrectionDialogManagement(negation) <-> no
CorrectionDialogManagement(negation) <-> sorry no
CorrectionDialogManagement(negation) <-> no sorry

#CorrectionTopicInfo(partner-correction) <-> no 
#CorrectionTopicInfo(partner-correction) <-> sorry no
#CorrectionTopicInfo(partner-correction) <-> no sorry

CorrectionTopicInfo(negation) <-> no
CorrectionTopicInfo(negation) <-> sorry no
CorrectionTopicInfo(negation) <-> no sorry
CorrectionTopicInfo(negation-polite) <-> sorry no
CorrectionTopicInfo(negation-polite) <-> no sorry

CorrectionTopicInfo(partner-correction) <-> no that's
CorrectionTopicInfo(partner-correction) <-> no that is
CorrectionTopicInfo(partner-correction) <-> no it's
CorrectionTopicInfo(negation-polite-partner-correction) <-> sorry no it's
CorrectionTopicInfo(partner-correction) <-> no it is
CorrectionTopicInfo(partner-correction) <-> no it was
CorrectionTopicInfo(partner-correction) <-> wrong that's
CorrectionTopicInfo(partner-correction) <-> wrong that is
CorrectionTopicInfo(partner-correction) <-> wrong it's
CorrectionTopicInfo(partner-correction) <-> wrong it is
CorrectionTopicInfo(partner-correction) <-> wrong it was

#"that is the area code"
CorrectionTopicInfo(partner-correction-present, ItemType($1)) <-> that is the {InfoTypeCat[$1]}
CorrectionTopicInfo(partner-correction-past, ItemType($1)) <-> that was the {InfoTypeCat[$1]}

#"is the area code"
InformTopicInfo(info-type-present, ItemType($1)) <-> is the {InfoTypeCat[$1]}
#"was the area code"
InformTopicInfo(info-type-past, ItemType($1)) <-> was the {InfoTypeCat[$1]}

#CorrectionTopicInfo(partner-correction-present, InfoTopic(ItemValue(Digit($1))), ItemType($2)) <-> {DigitCat[$1]} is the {InfoTypeCat[$2]}
#CorrectionTopicInfo(partner-correction-present, InfoTopic(ItemValue(DigitSequence($1))), ItemType($2)) <-> {DigitCat[$1]} is the {InfoTypeCat[$2]}




InformDialogManagement(self-readiness) <-> i'm ready
InformDialogManagement(self-readiness) <-> i am ready
InformDialogManagement(self-not-readiness) <-> i'm not ready
InformDialogManagement(self-not-readiness) <-> i am not ready
InformDialogManagement(self-not-readiness) <-> please wait
InformDialogManagement(self-not-readiness) <-> wait please 

InformDialogManagement(repeat-intention) <-> I'll repeat that.


CheckDialogManagement(other-readiness) <-> are you ready
CheckDialogManagement(other-readiness) <-> are you there


RequestDialogManagement(misalignment-start-again) <-> start from the top
RequestDialogManagement(misalignment-start-again) <-> start from the beginning
RequestDialogManagement(misalignment-start-again) <-> let's start again
RequestDialogManagement(misalignment-start-again) <-> start over
RequestDialogManagement(misalignment-start-again) <-> start over again
RequestDialogManagement(misalignment-start-again) <-> start again
RequestDialogManagement(misalignment-start-again) <-> let's start over

#Very context dependent
RequestDialogManagement(what) <-> como
RequestDialogManagement(what) <-> what

#i did not/do not  get/hear/understand  that 
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> huh
RequestDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <-> what was that
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> what did you say
RequestDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <-> i did not get that
RequestDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <-> i didn't get that
RequestDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <-> i did not hear that 
RequestDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <-> i didn't hear that
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> i did not hear you
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> i didn't hear you
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> i did not hear
RequestDialogManagement(misalignment-self-hearing-or-understanding) <-> i didn't hear

RequestDialogManagement(misalignment-partner-hearing-or-understanding) <-> you did not get that
RequestDialogManagement(misalignment-partner-hearing-or-understanding) <-> you didn't get that
RequestDialogManagement(misalignment-partner-hearing-or-understanding) <-> you did not hear 
RequestDialogManagement(misalignment-parnter-hearing-or-understanding) <-> you didn't hear 

#Request repeat of last utterance
#This should also include 'what' but 'what' is so multi-purpose it gets its own predicate
RequestDialogManagement(misalignment-request-repeat) <-> say that again
RequestDialogManagement(misalignment-request-repeat) <-> repeat that
RequestDialogManagement(misalignment-request-repeat) <-> repeat them
RequestDialogManagement(misalignment-request-repeat) <-> again please

#Request repeat of last utterance containing topic info
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what is it again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what is that again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what was it again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what was that again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what were they again


RequestDialogManagement(again) <-> again

RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> say the {InfoTypeCat[$1]} again
RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> repeat the {InfoTypeCat[$1]} 
RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> again please the {InfoTypeCat[$1]} 

RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> was that the {InfoTypeCat[$1]}
RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> did you just say the {InfoTypeCat[$1]}
RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> did you just give the {InfoTypeCat[$1]}
RequestDialogManagement(clarification-utterance-present, ItemType($1)) <-> is that the {InfoTypeCat[$1]}
RequestDialogManagement(clarification-utterance-present, ItemType($1)) <-> are those the {InfoTypeCat[$1]}


GrammaticalUtteranceConfirmationCat[partner] <-> did you say
GrammaticalUtteranceConfirmationCat[self] <-> did i say




#Request clarification of what was said about digit values as RequestTopicData DialogActs
#These mirror RequestTopicInfo(request-confirmation... above
#Unfortunate that we have to spell out each digit argument in a digit sequence. 
#There should be a more concise way to do this.

#did you say six

RequestDialogManagement(clarification-utterance-past, ItemValue(Digit($1))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]} {DigitCat[$1]}\


RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} 

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}

RequestDialogManagement(clarification-utterance-past, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}









#what is/was the/that digit/area-code/exchange/line-number/ telephone number
#does not come under DM misalignment repair.  but RequestTopicInfo 
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what {GrammaticalBeCat[$2]}{GrammaticalIndicativeCat[$3]}{InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what is the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what is that {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what was the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what was that {InfoTypeCat[$1]}

#i did not/do not  get/hear/understand  the/that    digit/area-code/exchange/line-number/...
RequestDialogManagement(misalignment-self-hearing-or-understanding, ItemType($1)) <->\
                   i {GrammaticalDoNotCat[$2]}{ActionCat[receive-info]} {GrammaticalIndicativeCat[$3]} {InfoTypeCat[$1]}

#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i {GrammaticalDoNotCat[$2]} get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i did not get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i didn't get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i did not hear the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i didn't hear the {InfoTypeCat[$1]}




GrammaticalBeCat[present-singular] <-> is
GrammaticalBeCat[present-plural] <-> are
GrammaticalBeCat[infinitive] <-> be
GrammaticalBeCat[past-singular] <-> was
GrammaticalBeCat[past-plural] <-> were

GrammaticalBeNotCat[present-singular] <-> isn't
GrammaticalBeNotCat[present-singular] <-> is not
GrammaticalBeNotCat[present-plural] <-> aren't
GrammaticalBeNotCat[present-plural] <-> are not
GrammaticalBeNotCat[past-singular] <-> wasn't
GrammaticalBeNotCat[past-singular] <-> was not
GrammaticalBeNotCat[past-plural] <-> weren't
GrammaticalBeNotCat[past-plural] <-> were not

GrammaticalDoNotCat[present] <-> doesn't
GrammaticalDoNotCat[present] <-> does not
GrammaticalDoNotCat[past] <-> didn't
GrammaticalDoNotCat[past] <-> did not
GrammaticalDoNotCat[future] <-> won't
GrammaticalDoNotCat[future] <-> will not 

GrammaticalIndicativeCat[definite-near] <-> this
GrammaticalIndicativeCat[definite] <-> the
GrammaticalIndicativeCat[definite-far] <-> that
GrammaticalIndicativeCat[indefinite] <-> a

GrammaticalBeIndicativeCat[present-singular-definite-far] <-> is that
GrammaticalBeIndicativeCat[past-singular-definite-far] <-> was that
GrammaticalBeIndicativeCat[present-singular-definite-far] <-> so that was
GrammaticalBeIndicativeCat[present-singular-definite-far] <-> so that's


ActionCat[receive-info] <-> hear
ActionCat[receive-info] <-> get
ActionCat[receive-info] <-> catch
ActionCat[receive-info] <-> receive
ActionCat[receive-info] <-> understand


#These should be fleshed out with arguments for checking different kinds of things
CheckTopicInfo(request-confirmation) <-> is that
CheckTopicInfo(request-confirmation) <-> right
CheckTopicInfo(request-affirmation) <-> is that right
CheckTopicInfo(request-affirmation) <-> is that correct








#should not be necessary
#InfoTopic(telephone-number) <-> {InfoTypeCat[telephone-number]}

#RequestTopicInfo(SendReceive(tell-me), InfoTopic(name)) <-> {CommandCat[tell-me]}


#This would work, but we're breaking down into smaller pieces of a SendReceive and an InfoTopic
#e.g. User: tell me the phone number
#To preserve generality, do not specify specific non-function words like 'the'.
#RequestTopicInfo(receive-telephone-number) <-> {CommandCat[tell-me]} {InfoTypeCat[telephone-number]}
#
#e.g. User: I would like to tell you the phone number
#To preserve generality, do not specify specific non-function words like 'the'.
#RequestTopicInfo(send-telephone-number) <-> {CommandCat[tell-you]} {InfoTypeCat[telephone-number]}
