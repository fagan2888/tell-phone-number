

#tell-phone-number-lf-rules-2.txt
#
#These rules are heavily influence by the Otto rule definition. But they are not
#guaranteed to obey it strictly.
#
#This version started 2016/06/05 stems from the initially pretty successful 
#organization, tell-phone-number-lf-rules.txt, but now departs in an attempt
#to bring stronger organization of the LogicalForms, in line with the 
#organization explained in the document, "Dialog Management for Data Communication",
#which is being written somewhat concurrently with program development.


#Rules map between DialogActs and strings for the tell-phone-number dialogue.
#
#A DialogAct is   Intent(LogicalForm, ...)
#
#In this rules file, there is a clear separation between DialogAct rules and 
#Utterance Category rules. 
#
#Utterance categories are like in Otto, in terms of variables enclosed by brackets [$1]
#In the current implementation of ruleProcessing.py, I treat DialogAct rules as 
#a distinctly different kind of rule from an Utterance Category rule.  Really, these
#should be unified, with the DialogAct being a type of Utterance Category rule 
#taking the special UtteranceCategoryName predicate, "DialogAct".
#
#But right now, the distinction is, a standard Utterance Category rule starts
#with a predicate UtteranceCategoryName that is uppercase and ends with Cat
#The Cat ending is by convention, not enforced in the code.  An Utterance Category
#rule is detected by the presence of square brackets [] on the LHS.
#
#A DialogAct rule starts with one of the Intent predicates,
#InformTopicInfo, InformDialogManagement, RequestTopicInform, ...
#A DialogAct rule does not contain square brackets on the LHS
#
#Both Utterance Category rules and DialogAct rules can specify direction,
# <-   interpretation only
#  ->  generator only
# <->  both interpretation and generator
#
#
#This version, tell-phone-number-lf-rules-2.txt, attempts to align with
#the document, "Dialog Management for Data Communication", and with the
#developmental notes file, "telephone-number-use-stories.text".
#Specifically, this tries to clarify the types of Topic Data information
#and Dialog Management information communicated.
#
#*Topic Data*
#
#  TDItemValue
#     e.g. six
#
#  TDItemType
#     e.g. digit
#
#  TDGroupName
#     e.g. area code
#
#  TDIndexicalPosition
#     e.g. sixth
#
#  TDIndexicalRelation
#     e.g. after
#
#
#This organization remains a bit unclean because we are using the categories,
#DigitCat and DigitSequenceCat as special types of TDItemValue.
#
#
#By convention, we'll use the following arugments in order to make it easier to keep track
#of which arguments are being referred to in the logical form processing rules.
#This does not go so far as encoding an arugment type in its alphanumeric value.
#Not sure if that would be desirable or not.
#
# $1 - $19     digit or other alphanumeric chars  e.g. $D_1, $D_12
# $20          ItemTypeName        (type of name, "my name", "your name"
# $40 - $49    Name, InfoNameCat   (a name, e.g. "person", "computer", "Dave")
# $25 - $29    ItemTypeChar        (the type of a char, e.g. digit, alphabetic, number)
# $30 - $35    FieldName
# $50 - $55    Command, Send/Receive  (tell-me / tell-you)
# $100 - $119  Grammar, Grammatical, Tense, etc.
# $120 - $124  ConfirmDialogManagement        affirmation-yes
# $125 - $129  CorrectionDialogManagement     negation, partner-correction#
## XX$130         Augmentation        entire
# $131         Knowledge           possess, lack
# $132         PersonRef           self, partner  (relative, not absolete, i.e. wrt who is speaking)
# $140 - $144  Indexical           first, next, entire ...
#


#Intents:
#
#InformTopicInfo
#InformDialogManagement
#  Proffer information about topic or dialog management.
#  Assumption that the recipient's belief confidence is low.
#
#RequestTopicInfo
#RequestDialogManagement
#  Request information about topic or dialog management,
#  or request adjustment in dialog management protocol.
#  Assumption that the speaker's belief confidence is low.
#
#CheckTopicInfo
#CheckDialogManagement
#  Reiterate or request affirmation of topic information or dialog 
#  management protocol state.
#  Assumption that the speaker's belief confidence is high.
#
#ConfirmTopicInfo      (short for Confirmation)
#ConfirmDialogManagement
#  Profide confirmation or affirmation of topic information or dialog management.
#  Assumption that the speaker's belief confidence is high.
#  Used if sender believes the recipient's information is correct.
#
#CorrectionTopicInfo
#CorrectionDialogManagement
#  Disaffirm topic information as communicated or dialog management protocol state.
#  Assumption that that the recipient's belief confidence is high.
#  Used if sender believes the recipient's information is incorrect.
#





#For handling TopicData Item Value

#Digit word categories
DigitCat[one] <-> one
DigitCat[two] <-> two
DigitCat[three] <-> three
DigitCat[four] <-> four
DigitCat[five] <-> five
DigitCat[six] <-> six
DigitCat[seven] <-> seven
DigitCat[eight] <-> eight
DigitCat[nine] <-> nine
DigitCat[zero] <-> zero
DigitCat[zero] <- oh

#Sending of digit values as InformTopicData DialogActs
#It is cumbersome to have a separate DialogAct for each number of digits.
#It will probably be better to make a special processing rule to collect up
#successive digits as a single argument.  

InformTopicInfo(ItemValue(Digit($1))) <-> {DigitCat[$1]}

InformTopicInfo(ItemValue(DigitSequence($1, $2))) <-> \
{DigitCat[$1]} {DigitCat[$2]} 
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}
InformTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}


#Sending of digit values as CheckTopicInfo DialogActs
#Right now, ruleProcessing.selectMaximallyCoveringRules() does not allow muliple DialogActs to 
#apply to the same set of words, so it does not return two interpretations of the same input
#.e.g. both InformTopicInfo and CheckTopicInfo.
#CheckTopicInfo(ItemValue(Digit($1))) <-> {DigitCat[$1]}
#
#CheckTopicInfo(ItemValue(DigitSequence($1, $2))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} 
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}
#CheckTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
#{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} #{DigitCat[$10]}




#For handling TopicData Item Type

#One possible approach
#InformTopicInfo(ItemType(telephone-number)) <-> {ObjectCat[telephone]} number
#ObjectCat[telephone] <-> telephone
#ObjectCat[telephone] <-> phone

#InformTopicInfo(ItemType(digit)) <-> digit
#InformTopicInfo(ItemType(digit)) <-> number
#InformTopicInfo(ItemType(area-code)) <-> area code
#InformTopicInfo(ItemType(exchange)) <-> exchange
#InformTopicInfo(ItemType(exchange)) <-> prefix
#InformTopicInfo(ItemType(line-number)) <-> line number
#InformTopicInfo(ItemType(line-number)) <-> last four digits
#InformTopicInfo(ItemType(line-number)) <-> last four numbers


#A second approach
#InformTopicInfo(ItemType($1)) <-> {InfoTypeCat[$1]}
#
#InfoTypeCat[telephone-number] <- phone number
#InfoTypeCat[telephone-number] <-> telephone number
#InfoTypeCat[digit] <- number
#InfoTypeCat[digit] <-> digit
#InfoTypeCat[area-code] <-> area code
#InfoTypeCat[exchange] <- prefix
#InfoTypeCat[exchange] <-> exchange
#InfoTypeCat[line-number] <-> line number
#InfoTypeCat[line-number] <- last four digits
#InfoTypeCat[line-number] <- last four numbers
#
#
#
#InfoTypeCat[address] <- place of residence
#InfoTypeCat[address] <- street address
#InfoTypeCat[address] <-> address
#
#InfoTypeCat[agent-name] <-> your name
#InfoTypeCat[user-name] <-> my name
#
#InfoNameCat[person] <-> person
#InfoNameCat[computer] <-> computer


#A third approach 2016/06/05
InformTopicInfo(ItemTypeName($20)) <-> {ItemTypeNameCat[$20]}
InformTopicInfo(ItemTypeChar($25)) <-> {ItemTypeCharCat[$25]}
InformTopicInfo(FieldName($30)) <-> {FieldNameCat[$30]}


#That is the area code
InformTopicInfo(grammatical-be-indicative, Grammar($100), FieldName($30)) <-> {GrammaticalBeIndicativeAssertionCat[$100]} {FieldNameCat[$30]}





#TopicData Item Type
# types of Item Values
#The format is
# ItemType[category of type]Cat

ItemTypeCharCat[digit] <- number
ItemTypeCharCat[digit] <-> digit
ItemTypeCharCat[alphabetic] <-> letter
ItemTypeCharCat[alphanumeric] <-> character
ItemTypeCharCat[alphanumeric] <- alphanumeric
ItemTypeCharCat[punctuation-parenthesis] <-> parenthesis
ItemTypeCharCat[punctuation-dash] <-> dash



#TopicData Field Name
# names for groupings of item values in the data model into fields
# fields can overlap, but they are not hierarchical in the sense
#that all fields refer to indices of the base data string, not
#to each other.

FieldNameCat[telephone-number] <- phone number
FieldNameCat[telephone-number] <-> telephone number
FieldNameCat[area-code] <-> area code
FieldNameCat[exchange] <- prefix
FieldNameCat[exchange] <-> exchange
FieldNameCat[line-number] <-> line number
FieldNameCat[line-number] <- last four digits
FieldNameCat[line-number] <- last four numbers
FieldNameCat[country-code] <-> country code
FieldNameCat[extension] <-> extension

FieldNameCat[address] <- place of residence
FieldNameCat[address] <- street address
FieldNameCat[address] <-> address
FieldNameCat[address-street] <-> street name
FieldNameCat[apartment-number] <-> apartment
FieldNameCat[apartment-number] <- unit
FieldNameCat[city] <-> city
FieldNameCat[state] <-> state
FieldNameCat[zip-code] <-> zip code
FieldNameCat[country] <-> country


InformTopicInfo(FieldName($30)) <-> {FieldNameCat[$30]}



#I actually think this needs reworking more to give digits and other fields
#parallel structure
#
#   agent-name and user-name should be field names,
#   and their values can be person, computer

ItemTypeNameCat[agent-name-user-perspective] <- your name
ItemTypeNameCat[agent-firstname-user-perspective] <- your first name
ItemTypeNameCat[agent-lastname-user-perspective] <- your last name
ItemTypeNameCat[user-name-user-perspective] <- my name
ItemTypeNameCat[user-firstname-user-perspective] <- my first name
ItemTypeNameCat[user-lastname-user-perspective] <- my last name

ItemTypeNameCat[agent-name-agent-perspective] -> my name
ItemTypeNameCat[agent-firstname-agent-perspective] -> my first name
ItemTypeNameCat[agent-lastname-agent-perspective] -> my last name
ItemTypeNameCat[user-name-agent-perspective] -> your name
ItemTypeNameCat[user-firstname-agent-perspective] -> your first name
ItemTypeNameCat[user-lastname-agent-perspective] -> your last name

#provide DialogRules that bridge to Utterance Categories so the Utterance Categories can
#be referred to in other DialogRules like RequestTopicInfo.
#InfoTopic() is a fairly general LogicalForm that can be used directly in program logic.
#Its arguments tell more details.

ItemTypeName(agent-name-user-perspective) <-> {ItemTypeNameCat[agent-name-user-perspective]}
ItemTypeName(user-name-user-perspective) <-> {ItemTypeNameCat[user-name-user-perspective]}
ItemTypeName(agent-name-agent-perspective) <-> {ItemTypeNameCat[agent-name-agent-perspective]}
ItemTypeName(user-name-agent-perspective) <-> {ItemTypeNameCat[user-name-agent-perspective]}




#Names for participants
#We'll have to find ways to allow new names to be entered
InfoNameCat[person] <-> person
InfoNameCat[computer] <-> computer


#These could have used ItemTypeNameCat[agent-name-user-perspective]
InformTopicInfo(user-name-user-perspective, Name($40)) <- my name is {InfoNameCat[$40]}
InformTopicInfo(user-name-user-perspective, Name($40)) <- my name it's {InfoNameCat[$40]}
InformTopicInfo(user-name-user-perspective, Name($40)) <- my name it is {InfoNameCat[$40]}
InformTopicInfo(user-name-user-perspective, Name($40)) <- {InfoNameCat[$40]} is my name
InformTopicInfo(agent-name-user-perspective, Name($40)) <- your name is {InfoNameCat[$40]}

InformTopicInfo(agent-name-agent-perspective, Name($40)) -> My name is {InfoNameCat[$40]}
#to tack on "I believe" use InformRoleInterpersonal(agent-belief)
InformTopicInfo(user-name-agent-perspective, Name($40)) -> your name is {InfoNameCat[$40]}


RequestTopicInfo(SendReceive(tell-me), ItemTypeName(user-name-agent-perspective)) <- who am i
RequestTopicInfo(SendReceive(tell-me), ItemTypeName(agent-name-agent-perspective)) <- who are you





#Role & Interpersonal Relation: belief
InformRoleInterpersonalTopicData(user-belief) <- I believe
InformRoleInterpersonalTopicData(user-belief) <- I think
InformRoleInterpersonalTopicData(agent-belief) -> I believe

RequestRoleInterpersonalTopicData(agent-belief) <- Do you believe
RequestRoleInterpersonalTopicData(agent-belief) <- Do you think
RequestRoleInterpersonalTopicData(user-belief) -> Do you think


InformTopicInfo(SayIs(ItemTypeChar($25))) <-> the {ItemTypeCharCat[$25]} is 
InformTopicInfo(SayIs(FieldName($30))) <-> the {FieldNameCat[$30]} is 





#Indexical word categories
IndexicalCat[first] <-> first
IndexicalCat[second] <-> second
IndexicalCat[third] <-> third
IndexicalCat[fourth] <-> fourth
IndexicalCat[fifth] <-> fifth
IndexicalCat[sixth] <-> sixth
IndexicalCat[seventh] <-> seventh
IndexicalCat[final] <-> final
IndexicalCat[final] <- the final
IndexicalCat[last] <-> last       #last has two meanings, final and previous, have to treat is special
IndexicalCat[previous] <- before
IndexicalCat[previous] <-> previous
IndexicalCat[next] <- after
IndexicalCat[next] <-> next
IndexicalCat[next] <- then
IndexicalCat[remainder] <-> rest
IndexicalCat[remainder] <- remainder
IndexicalCat[entire] <-> entire
IndexicalCat[entire] <- whole
IndexicalCat[entire] <- complete

InformTopicInfo(digit, IndexicalPosition($1)) <- {IndexicalCat[$1]} number
InformTopicInfo(digit, IndexicalPosition($1)) <-> {IndexicalCat[$1]} digit

InformTopicInfo(Indexical($140)) <-> {IndexicalCat[$140]}

#InformTopicInfo(IndexicalRelation(first)) <-> first
#InformTopicInfo(IndexicalRelation(second)) <-> second
#InformTopicInfo(IndexicalRelation(third)) <-> third
#InformTopicInfo(IndexicalRelation(last)) <-> last
#InformTopicInfo(IndexicalRelation(last)) <-> final
#InformTopicInfo(IndexicalRelation(previous)) <-> before
#InformTopicInfo(IndexicalRelation(previous)) <-> last
#InformTopicInfo(IndexicalRelation(previous)) <-> previous
#InformTopicInfo(IndexicalRelation(next)) <-> after
#InformTopicInfo(IndexicalRelation(next)) <-> next
#InformTopicInfo(IndexicalRelation(next)) <-> then
#InformTopicInfo(IndexicalRelation(remainder)) <-> rest
#InformTopicInfo(IndexicalRelation(remainder)) <-> remainder
#This might be preferable to Augmentation below
#InformTopicInfo(IndexicalRelation(entire)) <-> entire
#InformTopicInfo(IndexicalRelation(entire)) <-> whole
#InformTopicInfo(IndexicalRelation(entire)) <-> complete




#As in, "That's the third time I've given you the area code"
# this to be worked out later as needed 
InformDialogManagement(Alignment()) <-> last time
InformDialogManagement(Alignment()) <-> next time
InformDialogManagement(Alignment()) <-> second time
InformDialogManagement(Alignment()) <-> third time
InformDialogManagement(Alignment()) <-> fourth time



CommandCat[tell-me] <- please tell me
CommandCat[tell-me] <-> tell me
CommandCat[tell-me] <- give me
CommandCat[tell-me] <- provide me
CommandCat[tell-me] <- what is
CommandCat[tell-me] <- is what
CommandCat[tell-me] <- what's
CommandCat[tell-me] <- i want to know
CommandCat[tell-me] <- i need to know
CommandCat[tell-me] <- i want you to tell me
CommandCat[tell-me] <- i need you to tell me
CommandCat[tell-me] <- i would like you to tell me
CommandCat[tell-me] <- can you tell me
CommandCat[tell-me] <- receive
CommandCat[tell-me] <- get
CommandCat[tell-me] <- look up

CommandCat[tell-you] <-> tell you
CommandCat[tell-you] <- give you
CommandCat[tell-you] <- provide you
CommandCat[tell-you] <- take this
CommandCat[tell-you] <- take down this



#command form: tell me / tell you the the X
#what is the X
#These are interpretation only because they don't contain enough grammar for generation
RequestTopicInfo(SendReceive($50), ItemTypeName($20)) <- {CommandCat[$50]} {ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive($50), ItemTypeChar($25)) <- {CommandCat[$50]} {ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive($50), FieldName($30)) <- {CommandCat[$50]} {FieldNameCat[$30]}

#command form: tell me the entire / tell you the entire X / what is the entire X
#   tell me the next X / tell you the next X / what is the next X
#These are interpretation only because they don't contain enough grammar for generation
RequestTopicInfo(SendReceive($50), ItemTypeName($20), Indexical($140)) <- {CommandCat[$50]}{IndexicalCat[$140]}{ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive($50), ItemTypeChar($25), Indexical($140)) <- {CommandCat[$50]}{IndexicalCat[$140]}{ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive($50), FieldName($30), Indexical($140)) <- {CommandCat[$50]}{IndexicalCat[$140]}{FieldNameCat[$30]}


#ItemTypeName is about your, my, and their, not inanimate GrammaticalIndicative
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
      what {GrammaticalBeCat[$100]}{GrammaticalIndicativeCat[$3]}{ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
      {GrammaticalIndicativeCat[$100]}{ItemTypeNameCat[$20]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20)) <-> what is the {ItemTypeNameCat[$20]}

#what is the X
RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       what {GrammaticalBeCat[$101]}{GrammaticalIndicativeCat[$100]}{ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       {GrammaticalIndicativeCat[$100]}{ItemTypeCharCat[$25]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25)) <-> what is the {ItemTypeCharCat[$25]}

RequestTopicInfo(SendReceive(tell-me), FieldName($30), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       what {GrammaticalBeCat[$101]}{GrammaticalIndicativeCat[$100]}{FieldNameCat[$30]}
RequestTopicInfo(SendReceive(tell-me), FieldName($30), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       {GrammaticalIndicativeCat[$100]}{FieldNameCat[$30]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), FieldName($30)) <-> what is the {FieldNameCat[$30]}


#what is the next X, what is the entire X
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
      what {GrammaticalBeCat[$100]}{GrammaticalIndicativeCat[$3]}{IndexicalCat[$140]}{ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
      {GrammaticalIndicativeCat[$100]}{ItemTypeNameCat[$20]}{IndexicalCat[$140]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), ItemTypeName($20),Indexical($140)) <-> what is the {IndexicalCat[$140]}{ItemTypeNameCat[$20]}

RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       what {GrammaticalBeCat[$101]}{GrammaticalIndicativeCat[$100]}{IndexicalCat[$140]}{ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       {GrammaticalIndicativeCat[$100]}{IndexicalCat[$140]}{ItemTypeCharCat[$25]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), ItemTypeChar($25), Indexical($140)) <-> what is the {IndexicalCat[$140]}{ItemTypeCharCat[$25]}

RequestTopicInfo(SendReceive(tell-me), FieldName($30), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       what {GrammaticalBeCat[$101]}{GrammaticalIndicativeCat[$100]}{IndexicalCat[$140]}{FieldNameCat[$30]}
RequestTopicInfo(SendReceive(tell-me), FieldName($30), Indexical($140), GrammaticalIndicative($100), GrammaticalBe($101)) <- \
       {GrammaticalIndicativeCat[$100]}{IndexicalCat[$140]}{FieldNameCat[$30]}{GrammaticalBeCat[$101]} what
RequestTopicInfo(SendReceive(tell-me), FieldName($30), Indexical($140)) <-> what is the {IndexicalCat[$140]}{FieldNameCat[$30]}










#I'd like to send/receive X
RequestTopicInfo(SendReceive($50), ItemTypeName($20)) <-> I would like to {CommandCat[$50]} {ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive($50), ItemTypeName($20)) <- I'd like to {CommandCat[$50]} {ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive($50), ItemTypeName($20)) <-> I would like to {CommandCat[$50]} {ItemTypeNameCat[$20]}
RequestTopicInfo(SendReceive($50), ItemTypeName($20)) <- I'd like to {CommandCat[$50]} {ItemTypeNameCat[$20]}

RequestTopicInfo(SendReceive($50), ItemTypeChar($25)) <-> I would like to {CommandCat[$50]} {ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive($50), ItemTypeChar($25)) <- I'd like to {CommandCat[$50]} {ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive($50), ItemTypeChar($25)) <-> I would like to {CommandCat[$50]} {ItemTypeCharCat[$25]}
RequestTopicInfo(SendReceive($50), ItemTypeChar($25)) <- I'd like to {CommandCat[$50]} {ItemTypeCharCat[$25]}

RequestTopicInfo(SendReceive($50), FieldName($30)) <-> I would like to {CommandCat[$50]} {FieldNameCat[$30]}
RequestTopicInfo(SendReceive($50), FieldName($30)) <- I'd like to {CommandCat[$50]} {FieldNameCat[$30]}
RequestTopicInfo(SendReceive($50), FieldName($30)) <-> I would like to {CommandCat[$50]} {FieldNameCat[$30]}
RequestTopicInfo(SendReceive($50), FieldName($30)) <- I'd like to {CommandCat[$50]} {FieldNameCat[$30]}





#If an InfoTypeCat is not recognized, at least notice that a RequestTopicInfo has been issued
RequestTopicInfo(SendReceive(tell-me)) <-> {CommandCat[tell-me]}




#Request confirmation of digit values as RequestTopicInfo DialogActs
#These mirror InformTopicInfo above
#clarification/confirmation is in the gray zone between RequestTopicInfo 
#and RequestDialogManagement; "was that the area code" might come under the latter
#because it refers to a field name not a data value
#Unfortunate that we have to spell out each digit argument in a digit sequence. 
#There should be a more concise way to do this.
#Possibly this could be treated as a concatenation of an Intent encoding 
#the GrammaticalBeIndicativeQuestionCat followed by an Intent holding the digits.
#
#was that six / is that six

RequestTopicInfo(request-confirmation, ItemValue(Digit($1)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]} {DigitCat[$1]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} 

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)), Grammar($100)) <-> \
{GrammaticalBeIndicativeQuestionCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}






#"is six five zero the area code?"

RequestTopicInfo(request-confirmation, ItemValue(Digit($1)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} the {FieldNameCat[$30]}

RequestTopicInfo(request-confirmation, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)), FieldName($30), Tense($100)) <-> \
{GrammaticalBeCat[$100]} {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}\
the {FieldNameCat[$30]}










InformDialogManagement(greeting) <-> hello

InformTopicInfo(all-done) <-> We're all done

#capitalization and punctuation means this can be processed as output only.
InformDialogManagement(misaligned-roles) <-> Hello?

InformDialogManagement(dialog-invitation) <-> Would you like to send or receive a phone number?

InformDialogManagement(misaligned-index-pointer) <-> we are out of sync about which digit we're talking about

InformDialogManagement(misaligned-digit-values) <-> we are out of sync about the phone number digits


#Also serves as CheckTopicInfo(request-affirmation), as in okay? as a question
#When we have prosody then maybe we can separate these.
#These are turn continuers.
ConfirmDialogManagement(affirmation-okay) <- ok
ConfirmDialogManagement(affirmation-okay) <-> okay
ConfirmDialogManagement(affirmation-okay) <- alright
ConfirmDialogManagement(affirmation-yes) <-> yes
ConfirmDialogManagement(affirmation-yes) <- sure
ConfirmDialogManagement(affirmation-yes) <- yup
ConfirmDialogManagement(affirmation-yes) <- proceed
ConfirmDialogManagement(affirmation-yes) <- go on
ConfirmDialogManagement(affirmation-yes) <- got it
ConfirmDialogManagement(affirmation-yes) <- got it already
ConfirmDialogManagement(affirmation-yes) <- got that
ConfirmDialogManagement(affirmation-yes) <- allright
ConfirmDialogManagement(affirmation-yes) <- all right
ConfirmDialogManagement(affirmation-yes) <- i got it already
ConfirmDialogManagement(affirmation-yes) <- i got that already


#These should probably be broken out as request-for-next-chunk, which 
#would imply affirmation-yes but goes beyond that.
##XXX These should be RequestDialogManagement(advance-indexical)
ConfirmDialogManagement(affirmation-yes) <-> please go on
ConfirmDialogManagement(affirmation-yes) <- keep going
ConfirmDialogManagement(affirmation-yes) <- what else
ConfirmDialogManagement(affirmation-yes) <- then what
ConfirmDialogManagement(affirmation-yes) <- what's next
ConfirmDialogManagement(affirmation-yes) <- what is next
ConfirmDialogManagement(affirmation-yes) <- what comes next
ConfirmDialogManagement(affirmation-yes) <- what's after that
ConfirmDialogManagement(affirmation-yes) <- what is after that
ConfirmDialogManagement(affirmation-yes) <- what comes after that


#i've got the area code
#PossessionCat <-> got is both have-present and have-past, so pass the tense through for PossessionCat
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense($100), FieldName($30)) <-> \
                               i {PossessionCat[$100]} the {FieldNameCat[$30]}
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <-> \
                               i've got the {FieldNameCat[$30]}
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense($100), FieldName($30)) <- \
                               i {PossessionCat[$100]} the {FieldNameCat[$30]} already
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <-> \
                               i've got the {FieldNameCat[$30]} already
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense($100), FieldName($30)) <- \
                               i already {PossessionCat[$100]} the {FieldNameCat[$30]}
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <- \
                               i've already got the {FieldNameCat[$30]}

#i know the area code
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <- \
                               i {KnowledgeCat[have-present]} the {FieldNameCat[$30]}
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <- \
                               i {KnowledgeCat[have-present]} the {FieldNameCat[$30]} already
InformDialogManagement(Knowledge(possess, PersonRef(self)), Tense(present), FieldName($30)) <- \
                               i already {KnowledgeCat[have-present]} the {FieldNameCat[$30]}


InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i told you the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i told you the {FieldNameCat[$30]} already
InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i already told you the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i said the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i said the {FieldNameCat[$30]} already
InformDialogManagement(ActionInform(self, partner), Tense(past), FieldName($30)) <-> i already said the {FieldNameCat[$30]}

InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you told me the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you told me the {FieldNameCat[$30]} already
InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you already told me the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you said the {FieldNameCat[$30]}
InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you said the {FieldNameCat[$30]} already
InformDialogManagement(ActionInform(partner, self), Tense(past), FieldName($30)) <-> you already said the {FieldNameCat[$30]}



InformDialogManagement(self-correction) <-> sorry



#not sure about just plain no, it is so context-dependent
CorrectionDialogManagement(negation) <-> no
CorrectionDialogManagement(negation) <- no sorry
CorrectionDialogManagement(negation) <- sorry no


#CorrectionTopicInfo(partner-correction) <-> no 
#CorrectionTopicInfo(partner-correction) <-> sorry no
#CorrectionTopicInfo(partner-correction) <-> no sorry

CorrectionTopicInfo(negation) <-> no
CorrectionTopicInfo(negation) <- sorry no
CorrectionTopicInfo(negation) <- no sorry
CorrectionTopicInfo(negation-polite) <-> sorry no
CorrectionTopicInfo(negation-polite) <- no sorry

CorrectionTopicInfo(partner-correction) <-> no that's
CorrectionTopicInfo(partner-correction) <-> no that is
CorrectionTopicInfo(partner-correction) <-> no it's
CorrectionTopicInfo(negation-polite-partner-correction) <-> sorry no it's
CorrectionTopicInfo(partner-correction) <-> no it is
CorrectionTopicInfo(partner-correction) <-> no it was
CorrectionTopicInfo(partner-correction) <- wrong that's
CorrectionTopicInfo(partner-correction) <- wrong that is
CorrectionTopicInfo(partner-correction) <- wrong it's
CorrectionTopicInfo(partner-correction) <- wrong it is
CorrectionTopicInfo(partner-correction) <- wrong it was


#"not the area code"
CorrectionTopicInfo(FieldName($30)) <-> not the {FieldNameCat[$30]}

#"not six five zero"
CorrectionTopicInfo(ItemValue(Digit($1))) <-> \
not {DigitCat[$1]}\

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} 

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} {DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}

CorrectionTopicInfo(ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10))) <-> \
not {DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}













#The syntact construction, "is the area code" can be used both in a question and in a statement:
#  is the area code [six five zero]    Request(request-confirmation, 
#  [six five zero] is the area code    Inform(be
#Right now, we cannot produce multiple Intent semantic parses for the same utterance
#When an utterance is parsed in terms of multiple intents (to preserve syntactic order), they
#the first Inten is the one used in dialogAgent.py to dispatch on to interpret and formulate
#a response.   Therefore, we choose to use the Request Intent for "is the FieldName"


#"is the area code"
#{ definite-present, definite-past, indefinite-present, indefinite-past }
RequestTopicInfo(request-confirmation, Tense($100), FieldName($30)) <-> {GrammaticalBeIndicativeCat[$100]}{FieldNameCat[$30]}





#"is the"
#{ definite-present, definite-past, indefinite-present, indefinite-past }
InformTopicInfo(GrammaticalBeIndicative($100)) <-> {GrammaticalBeIndicativeCat[$100]}



InformDialogManagement(self-readiness) <- i'm ready
InformDialogManagement(self-readiness) <-> i am ready
InformDialogManagement(self-not-readiness) <- i'm not ready
InformDialogManagement(self-not-readiness) <-> i am not ready
InformDialogManagement(self-not-readiness) <-> please wait
InformDialogManagement(self-not-readiness) <- wait please 

InformDialogManagement(repeat-intention) <-> I'll repeat that.
InformDialogManagement(repeat-intention) <- I will repeat that.


CheckDialogManagement(other-readiness) <-> are you ready
CheckDialogManagement(other-readiness) <- are you there


RequestDialogManagement(misalignment-start-again) <- start from the top
RequestDialogManagement(misalignment-start-again) <- start from the beginning
RequestDialogManagement(misalignment-start-again) <- let's start again
RequestDialogManagement(misalignment-start-again) <- start over
RequestDialogManagement(misalignment-start-again) <- start over again
RequestDialogManagement(misalignment-start-again) <- start again
RequestDialogManagement(misalignment-start-again) <-> let's start over

#Very context dependent
RequestDialogManagement(what) <-> como
RequestDialogManagement(what) <-> what



#i did not/do not  get/hear/understand  that 

InformDialogManagement(misalignment-self-hearing-or-understanding) <-> . sorry, i did not {ActionCat[receive-info-present]} that
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i do not {ActionCat[receive-info-present]}
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i did not {ActionCat[receive-info-present]}
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i didn't {ActionCat[receive-info-present]}
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i do not {ActionCat[receive-info-present]} that
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i did not {ActionCat[receive-info-present]} that
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i didn't  {ActionCat[receive-info-present]} that
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i do not {ActionCat[receive-info-present]} you
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i did not {ActionCat[receive-info-present]} you
InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i didn't  {ActionCat[receive-info-present]} you

#InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i did not {ActionCat[receive-info-present]} that 
#InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i didn't  {ActionCat[receive-info-present]} that
#InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i didn't  {ActionCat[receive-info-present]} that
#InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i did not {ActionCat[receive-info-present]} that
#InformDialogManagement(misalignment-self-hearing-or-understanding, pronoun-ref) <- i do not {ActionCat[receive-info-present]} that
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i did not {ActionCat[receive-info-present]} you
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i didn't {ActionCat[receive-info-present]} you
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i did not {ActionCat[receive-info-present]}
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i didn't {ActionCat[receive-info-present]}
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i didn't {ActionCat[receive-info-present]}
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i did not {ActionCat[receive-info-present]}
#InformDialogManagement(misalignment-self-hearing-or-understanding) <- i do not {ActionCat[receive-info-present]}


#i did not/do not  get/hear/understand  the/that    digit/area-code/exchange/line-number/...
InformDialogManagement(misalignment-self-hearing-or-understanding, FieldName($30), Grammar($100), Grammar($101)) <->\
                   i {GrammaticalDoNotCat[$100]}{ActionCat[receive-info]} {GrammaticalIndicativeCat[$101]} {FieldNameCat[$30]}
InformDialogManagement(misalignment-self-hearing-or-understanding, ItemTypeChar($25), Grammar($100), Grammar($101)) <->\
                   i {GrammaticalDoNotCat[$100]}{ActionCat[receive-info]} {GrammaticalIndicativeCat[$101]} {ItemTypeCharCat[$25]}




InformDialogManagement(misalignment-partner-hearing-or-understanding) <-> you did not get that
InformDialogManagement(misalignment-partner-hearing-or-understanding) <-> you didn't get that
InformDialogManagement(misalignment-partner-hearing-or-understanding) <-> you did not hear 
InformDialogManagement(misalignment-parnter-hearing-or-understanding) <-> you didn't hear 

#Request repeat of last utterance
#This should also include 'what' but 'what' is so multi-purpose it gets its own predicate
RequestDialogManagement(misalignment-request-repeat) <-> please say that again
RequestDialogManagement(misalignment-request-repeat) <- say that again
RequestDialogManagement(misalignment-request-repeat) <- say again
RequestDialogManagement(misalignment-request-repeat) <- tell me that again
RequestDialogManagement(misalignment-request-repeat) <- repeat that
RequestDialogManagement(misalignment-request-repeat) <- once more
RequestDialogManagement(misalignment-request-repeat) <- one more time
RequestDialogManagement(misalignment-request-repeat) <- repeat them
RequestDialogManagement(misalignment-request-repeat) <- again please

RequestDialogManagement(misalignment-request-repeat) <- huh
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what was that
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what's that
RequestDialogManagement(misalignment-request-repeat) <- what did you say


#Request repeat of last utterance containing topic info
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what is it again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what is that again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what was it again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <-> what was that again
RequestDialogManagement(misalignment-request-repeat, pronoun-ref) <- what were they again


RequestDialogManagement(again) <-> again

RequestDialogManagement(misalignment-request-repeat, FieldName($30)) <-> say the {FieldNameCat[$30]} again
RequestDialogManagement(misalignment-request-repeat, FieldName($30)) <-> repeat the {FieldNameCat[$30]} 
RequestDialogManagement(misalignment-request-repeat, FieldName($30)) <-> again please the {FieldNameCat[$30]} 

#clarification/confirmation is in the gray zone between RequestTopicInfo 
#and RequestDialogManagement; "was that the area code" comes under the latter
#because it refers to a field name not a data value
RequestDialogManagement(clarification-utterance, Grammar(past), FieldName($30)) <-> was that the {FieldNameCat[$30]}
RequestDialogManagement(clarification-utterance, Grammar(past), FieldName($30)) <-> did you just say the {FieldNameCat[$30]}
RequestDialogManagement(clarification-utterance, Grammar(past), FieldName($30)) <-> did you just give the {FieldNameCat[$30]}
RequestDialogManagement(clarification-utterance, Grammar(present), FieldName($30)) <-> is that the {FieldNameCat[$30]}
RequestDialogManagement(clarification-utterance, Grammar(present), FieldName($30)) <-> are those the {FieldNameCat[$30]}


GrammaticalUtteranceConfirmationCat[partner] <-> did you say
GrammaticalUtteranceConfirmationCat[self] <-> did i say




#Request clarification of what was said about digit values as RequestTopicData DialogActs
#These mirror RequestTopicInfo(request-confirmation... above
#Unfortunate that we have to spell out each digit argument in a digit sequence. 
#There should be a more concise way to do this.

#"did you say six five zero"

RequestDialogManagement(clarification-utterance, ItemValue(Digit($1)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]} {DigitCat[$1]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} 

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} 

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]}

RequestDialogManagement(clarification-utterance, ItemValue(DigitSequence($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)), Speaker($100)) <-> \
{GrammaticalUtteranceConfirmationCat[$100]}{DigitCat[$1]} {DigitCat[$2]} {DigitCat[$3]} \
{DigitCat[$4]} {DigitCat[$5]} {DigitCat[$6]} {DigitCat[$7]} {DigitCat[$8]} {DigitCat[$9]} {DigitCat[$10]}









#{present-singular, present-plural, infinitive, past-singular, past-plural}
GrammaticalBeCat[present-singular] <-> is
GrammaticalBeCat[present-plural] <-> are
GrammaticalBeCat[infinitive] <-> be
GrammaticalBeCat[past-singular] <-> was
GrammaticalBeCat[past-plural] <-> were

GrammaticalBeNotCat[present-singular] <- isn't
GrammaticalBeNotCat[present-singular] <-> is not
GrammaticalBeNotCat[present-plural] <- aren't
GrammaticalBeNotCat[present-plural] <-> are not
GrammaticalBeNotCat[past-singular] <- wasn't
GrammaticalBeNotCat[past-singular] <-> was not
GrammaticalBeNotCat[past-plural] <- weren't
GrammaticalBeNotCat[past-plural] <-> were not

GrammaticalDoNotCat[present] <- doesn't
GrammaticalDoNotCat[present] <-> does not
GrammaticalDoNotCat[past] <- didn't
GrammaticalDoNotCat[past] <-> did not
GrammaticalDoNotCat[future] <- won't
GrammaticalDoNotCat[future] <-> will not 

GrammaticalIndicativeCat[definite-near] <-> this
GrammaticalIndicativeCat[definite] <-> the
GrammaticalIndicativeCat[definite-far] <-> that
GrammaticalIndicativeCat[indefinite] <-> a

#{ definite-present, definite-past, indefinite-present, indefinite-past }
GrammaticalBeIndicativeCat[definite-present] <-> is the
GrammaticalBeIndicativeCat[definite-past] <-> was the
GrammaticalBeIndicativeCat[indefinite-present] <-> is a
GrammaticalBeIndicativeCat[indefinite-past] <-> was a


#How much to factorize the utterance category name versus list all combinations in the argument?
GrammaticalBeIndicativeQuestionCat[present-singular-far] <-> is that
GrammaticalBeIndicativeQuestionCat[past-singular-far] <-> was that
GrammaticalBeIndicativeQuestionCat[present-singular-near] <-> is this
GrammaticalBeIndicativeQuestionCat[past-singular-near] <-> was this
GrammaticalBeIndicativeQuestionCat[present-plural-far] <-> are those
GrammaticalBeIndicativeQuestionCat[past-plural-far] <-> were those
GrammaticalBeIndicativeQuestionCat[present-plural-near] <-> are these
GrammaticalBeIndicativeQuestionCat[past-plural-near] <-> were these

GrammaticalBeIndicativeQuestionCat[present-singular-definite-far] <-> is that the
GrammaticalBeIndicativeQuestionCat[past-singular-definite-far] <-> was that the
GrammaticalBeIndicativeQuestionCat[present-singular-definite-near] <-> is this the
GrammaticalBeIndicativeQuestionCat[past-singular-definite-near] <-> was this the
GrammaticalBeIndicativeQuestionCat[present-plural-definite-far] <-> are those the
GrammaticalBeIndicativeQuestionCat[past-plural-definite-far] <-> were those the
GrammaticalBeIndicativeQuestionCat[present-plural-definite-near] <-> are these the
GrammaticalBeIndicativeQuestionCat[past-plural-definite-near] <-> were these the

GrammaticalBeIndicativeAssertionCat[present-singular-far] <-> that is 
GrammaticalBeIndicativeAssertionCat[past-singular-far] <-> that was 
GrammaticalBeIndicativeAssertionCat[present-singular-near] <-> this is 
GrammaticalBeIndicativeAssertionCat[past-singular-near] <-> this was 
GrammaticalBeIndicativeAssertionCat[present-plural-far] <-> those are 
GrammaticalBeIndicativeAssertionCat[past-plural-far] <-> those were 
GrammaticalBeIndicativeAssertionCat[present-plural-near] <-> these are 
GrammaticalBeIndicativeAssertionCat[past-plural-near] <-> these were 

GrammaticalBeIndicativeAssertionCat[present-singular-definite-far] <-> that is the
GrammaticalBeIndicativeAssertionCat[past-singular-definite-far] <-> that was the
GrammaticalBeIndicativeAssertionCat[present-singular-definite-near] <-> this is the
GrammaticalBeIndicativeAssertionCat[past-singular-definite-near] <-> this was the
GrammaticalBeIndicativeAssertionCat[present-plural-definite-far] <-> those are the
GrammaticalBeIndicativeAssertionCat[past-plural-definite-far] <-> those were the
GrammaticalBeIndicativeAssertionCat[present-plural-definite-near] <-> these are the
GrammaticalBeIndicativeAssertionCat[past-plural-definite-near] <-> these were the


GrammaticalBeIndicativeAssertionCat[present-singular-definite-far] <- so that was
GrammaticalBeIndicativeAssertionCat[present-singular-definite-far] <- so that's


#This is be replaced by IndexicalRelation[entire]
#AugmentationCat[entire-item-adj] <-> entire
#AugmentationCat[entire-item-adj] <- whole
#AugmentationCat[entire-item-adj] <- complete

#AugmentationCat[entire-item-post] <-> all at once
#AugmentationCat[entire-item-post] <- all together
#AugmentationCat[entire-item-post] <- at one time
#AugmentationCat[entire-item-post] <- without pausing


#"I heard you say"
InformDialogManagement(Inform(partner, self), Tense(past)) <-> I heard you say,



#A way to allow an utterance to start with a GrammaticalBeIndicativeQuestionCat, 
#i.e. "is that"
RequestDialogManagement(grammatical-be-indicative, Grammar($100)) <-> {GrammaticalBeIndicativeQuestionCat[$100]}

#A way to allow an utterance to start with a GrammaticalBeIndicativeAssertionCat, 
#i.e. "that is"
InformDialogManagement(grammatical-be-indicative, Grammar($100)) <-> {GrammaticalBeIndicativeAssertionCat[$100]}



ActionCat[receive-info-present] <- hear
ActionCat[receive-info-present] <- get
ActionCat[receive-info-present] <- catch
ActionCat[receive-info-present] <- receive
ActionCat[receive-info-present] <-> understand

ActionCat[receive-info-past] <- heard
ActionCat[receive-info-past] <- got
ActionCat[receive-info-past] <- caught
ActionCat[receive-info-past] <- received
ActionCat[receive-info-past] <-> understood

ActionCat[send-info-present] <-> say
ActionCat[send-info-present] <- tell
ActionCat[send-info-past] <-> said
ActionCat[send-info-past] <- told

InformDialogManagement(Inform(self, partner), Tense(past)) <-> i told you
InformDialogManagement(Inform(partner, self), Tense(past)) <-> you told me
InformDialogManagement(Inform(self, partner), Tense(present)) <-> i tell you
InformDialogManagement(Inform(partner, self), Tense(present)) <-> you tell me


#Contractions like "i've" for "i have" are dealt with in the larger rule 
PossessionCat[have-present] <-> have
PossessionCat[have-present] <-> got
PossessionCat[have-present] <-> have got
PossessionCat[not-have-present] <- don't have
PossessionCat[not-have-present] <-> do not have
PossessionCat[not-have-present] <- haven't got
PossessionCat[not-have-present] <-> have not got

PossessionCat[have-past] <-> had
PossessionCat[have-past] <-> got
PossessionCat[have-past] <-> had gotten
PossessionCat[not-have-past] <- didn't have
PossessionCat[not-have-past] <-> did not have
PossessionCat[not-have-past] <- hadn't got
PossessionCat[not-have-past] <- hadn't gotten
PossessionCat[not-have-past] <-> had not got
PossessionCat[not-have-past] <-> had not gotten


KnowledgeCat[have-present] <-> know
KnowledgeCat[not-have-present] <- don't know
KnowledgeCat[not-have-present] <-> do not know

KnowledgeCat[have-past] <-> knew
KnowledgeCat[not-have-past] <- didn't know
KnowledgeCat[not-have-past] <-> did not know


DesireAssertionCat[self-positive-present] <- i want 
DesireAssertionCat[self-positive-present] <- i would like 
DesireAssertionCat[self-positive-present] <- i would prefer
DesireAssertionCat[self-positive-present] <-> i prefer
DesireAssertionCat[self-positive-past] <-> i wanted 
DesireAssertionCat[self-positive-past] <- i preferred

DesireAssertionCat[self-negative-present] <- i don't want 
DesireAssertionCat[self-negative-present] <- i do not want 
DesireAssertionCat[self-negative-present] <- i would not like 
DesireAssertionCat[self-negative-present] <-> i would not prefer
DesireAssertionCat[self-negative-past] <- i did not want 
DesireAssertionCat[self-negative-past] <- i did not prefer

DesireAssertionCat[partner-positive-present] <-> you want 
DesireAssertionCat[partner-positive-present] <- you prefer
DesireAssertionCat[partner-positive-present] <-  you would like
DesireAssertionCat[partner-positive-present] <-  you would prefer
DesireAssertionCat[partner-positive-past] <- you wanted
DesireAssertionCat[partner-positive-past] <-> you preferred

DesireQuestionCat[self-positive-present] <-> do i want 
DesireQuestionCat[self-positive-present] <-  would i like
DesireQuestionCat[self-positive-past] <-> did i want

DesireQuestionCat[partner-positive-present] <- do you want 
DesireQuestionCat[partner-positive-present] <->  would you like
DesireQuestionCat[partner-positive-present] <-  would you prefer
DesireQuestionCat[partner-positive-past] <-> did you want
DesireQuestionCat[partner-positive-past] <- did you prefer




#These should be fleshed out with arguments for checking different kinds of things
CheckTopicInfo(request-confirmation) <- is that
CheckTopicInfo(request-confirmation) <- right
CheckTopicInfo(request-affirmation) <- is that right
CheckTopicInfo(request-affirmation) <-> is that correct




#Beyond the five basic DialogActs required for data communication,
#RequestAction is for robot interaction, and also testing TTS.
RequestAction(speak) <-> echo



####################################################
#
#Archives
#



#########
#Pure request form: what is/was the/that digit/area-code/exchange/number/ telephone number
#RequestTopicInfo(ItemType($1)) <- what {GrammaticalBeCat[$2]}{GrammaticalIndicativeCat[$3]}{InfoTypeCat[$1]}
#RequestTopicInfo(ItemType($1)) <- {GrammaticalIndicativeCat[$3]}{InfoTypeCat[$1]}{GrammaticalBeCat[$2]} what
#RequestTopicInfo(ItemType($1)) <-> what is the {InfoTypeCat[$1]}
#########



#what is/was the/that digit/area-code/exchange/line-number/ telephone number
#does not come under DM misalignment repair.  but RequestTopicInfo 

#RequestDialogManagement(misalignment-request-repeat, $1) <-> what {GrammaticalBeCat[$2]}{GrammaticalCat[$3]}{InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what is the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what is that {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what was the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-request-repeat, $1) <-> what was that {InfoTypeCat[$1]}


#########
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i {GrammaticalDoNotCat[$2]} get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i did not get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i didn't get the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i did not hear the {InfoTypeCat[$1]}
#RequestDialogManagement(misalignment-self-hearing-or-understanding, $1) <-> i didn't hear the {InfoTypeCat[$1]}
#########



#CorrectionTopicInfo(partner-correction-present, InfoTopic(ItemValue(Digit($1))), ItemType($2)) <-> {DigitCat[$1]} is the {InfoTypeCat[$2]}
#CorrectionTopicInfo(partner-correction-present, InfoTopic(ItemValue(DigitSequence($1))), ItemType($2)) <-> {DigitCat[$1]} is the {InfoTypeCat[$2]}



#RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> say the {InfoTypeCat[$1]} again
#RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> repeat the {InfoTypeCat[$1]} 
#RequestDialogManagement(misalignment-request-repeat, ItemType($1)) <-> again please the {InfoTypeCat[$1]} 
#
#RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> was that the {InfoTypeCat[$1]}
#RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> did you just say the {InfoTypeCat[$1]}
#RequestDialogManagement(clarification-utterance-past, ItemType($1)) <-> did you just give the {InfoTypeCat[$1]}
#RequestDialogManagement(clarification-utterance-present, ItemType($1)) <-> is that the {InfoTypeCat[$1]}
#RequestDialogManagement(clarification-utterance-present, ItemType($1)) <-> are those the {InfoTypeCat[$1]}


#InformTopicInfo(SayItemType($1)) <-> the {InfoTypeCat[$1]} is 


#This is actually Inform, not a correction
#"that is the area code"
#CorrectionTopicInfo(partner-correction-present, FieldName($30)) <-> that is the {FieldNameCat[$30]}
#CorrectionTopicInfo(partner-correction-past, FieldName($30)) <- that was the {FieldNameCat[$30]}
#CorrectionTopicInfo(partner-correction-present, ItemTypeChar($25)) <-> that is the {ItemTypeCharCat[$25]}
#CorrectionTopicInfo(partner-correction-past, ItemTypeChar($25)) <- that was the {ItemTypeCharCat[$25]}


#"is the area code"
#InformTopicInfo(info-type-present, ItemTypeChar($25)) <-> is the {ItemTypeCharCat[$25]}
#InformTopicInfo(info-type-present, FieldName($30)) <-> is the {FieldNameCat[$30]}
#"was the area code"
#InformTopicInfo(info-type-past, ItemTypeChar($25)) <-> was the {ItemTypeCharCat[$25]}
#InformTopicInfo(info-type-past, FieldName($30)) <-> was the {FieldNameCat[$30]}

